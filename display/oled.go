package display

import (
	"fmt"
	"image/color"
	"machine"

	"esp32/hardware"
	"esp32/system"
	"tinygo.org/x/drivers/ssd1306"
)

// Initialize OLED display
func InitOLED() {
	fmt.Println("Initializing OLED display...")

	// Configure I2C
	machine.I2C0.Configure(machine.I2CConfig{
		SCL:       hardware.SclPin,
		SDA:       hardware.SdaPin,
		Frequency: 400000, // 400kHz
	})

	// Create SSD1306 device instance
	system.Display = ssd1306.NewI2C(machine.I2C0)

	// Configure display
	system.Display.Configure(ssd1306.Config{
		Address: ssd1306.Address_128_32, // 0x3C
		Width:   128,
		Height:  64,
	})

	// Clear display
	system.Display.ClearDisplay()
	system.OledInitialized = true
	fmt.Println("OLED display initialization completed")
}

// Display message to screen
func DisplayMessage(title, message string) {
	if !system.OledInitialized {
		return
	}

	system.Display.ClearBuffer()
	DrawSimpleText(title, 0, 0)
	DrawSimpleText(message, 0, 20)
	system.Display.Display()

	fmt.Printf("[Display] %s: %s\n", title, message)
}

// Display recording status
func DisplayRecordingStatus() {
	if !system.OledInitialized {
		return
	}

	system.Display.ClearBuffer()
	DrawSimpleText("Recording...", 0, 0)
	DrawSimpleText(fmt.Sprintf("Time: %.1fs", system.RecordingTime), 0, 20)
	DrawSimpleText(fmt.Sprintf("Max: %ds", hardware.MAX_RECORD_TIME), 0, 40)
	system.Display.Display()
}

// Display playing status
func DisplayPlayingStatus() {
	if !system.OledInitialized {
		return
	}

	totalTime := float64(system.RecordedSamples) / hardware.SAMPLE_RATE
	system.Display.ClearBuffer()
	DrawSimpleText("> PLAY", 0, 0)
	DrawSimpleText(fmt.Sprintf("%.1f/%.1fs", system.PlayingTime, totalTime), 0, 20)

	// Display progress bar
	progress := int(system.PlayingTime / totalTime * 120)
	if progress > 120 {
		progress = 120
	}
	for i := 0; i < progress; i++ {
		system.Display.SetPixel(int16(i+4), 45, color.RGBA{255, 255, 255, 255})
	}

	system.Display.Display()
}

// Draw simple text (using pixel matrix)
func DrawSimpleText(text string, x, y int16) {
	charWidth := int16(6) // Including spacing
	currentX := x

	for _, char := range text {
		if currentX > 122 { // Prevent exceeding screen boundaries
			break
		}
		DrawChar5x7(char, currentX, y)
		currentX += charWidth
	}
}

// Draw 5x7 pixel character - optimized complete character set
func DrawChar5x7(char rune, x, y int16) {
	var pattern []uint8

	switch char {
	// Uppercase letters
	case 'A':
		pattern = []uint8{0x7C, 0x12, 0x11, 0x12, 0x7C}
	case 'B':
		pattern = []uint8{0x7F, 0x49, 0x49, 0x49, 0x36}
	case 'C':
		pattern = []uint8{0x3E, 0x41, 0x41, 0x41, 0x22}
	case 'D':
		pattern = []uint8{0x7F, 0x41, 0x41, 0x22, 0x1C}
	case 'E':
		pattern = []uint8{0x7F, 0x49, 0x49, 0x49, 0x41}
	case 'F':
		pattern = []uint8{0x7F, 0x09, 0x09, 0x09, 0x01}
	case 'G':
		pattern = []uint8{0x3E, 0x41, 0x49, 0x49, 0x7A}
	case 'H':
		pattern = []uint8{0x7F, 0x08, 0x08, 0x08, 0x7F}
	case 'I':
		pattern = []uint8{0x00, 0x41, 0x7F, 0x41, 0x00}
	case 'J':
		pattern = []uint8{0x20, 0x40, 0x41, 0x3F, 0x01}
	case 'K':
		pattern = []uint8{0x7F, 0x08, 0x14, 0x22, 0x41}
	case 'L':
		pattern = []uint8{0x7F, 0x40, 0x40, 0x40, 0x40}
	case 'M':
		pattern = []uint8{0x7F, 0x02, 0x0C, 0x02, 0x7F}
	case 'N':
		pattern = []uint8{0x7F, 0x04, 0x08, 0x10, 0x7F}
	case 'O':
		pattern = []uint8{0x3E, 0x41, 0x41, 0x41, 0x3E}
	case 'P':
		pattern = []uint8{0x7F, 0x09, 0x09, 0x09, 0x06}
	case 'Q':
		pattern = []uint8{0x3E, 0x41, 0x51, 0x21, 0x5E}
	case 'R':
		pattern = []uint8{0x7F, 0x09, 0x19, 0x29, 0x46}
	case 'S':
		pattern = []uint8{0x46, 0x49, 0x49, 0x49, 0x31}
	case 'T':
		pattern = []uint8{0x01, 0x01, 0x7F, 0x01, 0x01}
	case 'U':
		pattern = []uint8{0x3F, 0x40, 0x40, 0x40, 0x3F}
	case 'V':
		pattern = []uint8{0x1F, 0x20, 0x40, 0x20, 0x1F}
	case 'W':
		pattern = []uint8{0x7F, 0x20, 0x18, 0x20, 0x7F}
	case 'X':
		pattern = []uint8{0x63, 0x14, 0x08, 0x14, 0x63}
	case 'Y':
		pattern = []uint8{0x07, 0x08, 0x70, 0x08, 0x07}
	case 'Z':
		pattern = []uint8{0x61, 0x51, 0x49, 0x45, 0x43}

	// Lowercase letters
	case 'a':
		pattern = []uint8{0x20, 0x54, 0x54, 0x54, 0x78}
	case 'b':
		pattern = []uint8{0x7F, 0x48, 0x44, 0x44, 0x38}
	case 'c':
		pattern = []uint8{0x38, 0x44, 0x44, 0x44, 0x20}
	case 'd':
		pattern = []uint8{0x38, 0x44, 0x44, 0x48, 0x7F}
	case 'e':
		pattern = []uint8{0x38, 0x54, 0x54, 0x54, 0x18}
	case 'f':
		pattern = []uint8{0x08, 0x7E, 0x09, 0x01, 0x02}
	case 'g':
		pattern = []uint8{0x0C, 0x52, 0x52, 0x52, 0x3E}
	case 'h':
		pattern = []uint8{0x7F, 0x08, 0x04, 0x04, 0x78}
	case 'i':
		pattern = []uint8{0x00, 0x44, 0x7D, 0x40, 0x00}
	case 'j':
		pattern = []uint8{0x20, 0x40, 0x44, 0x3D, 0x00}
	case 'k':
		pattern = []uint8{0x7F, 0x10, 0x28, 0x44, 0x00}
	case 'l':
		pattern = []uint8{0x00, 0x41, 0x7F, 0x40, 0x00}
	case 'm':
		pattern = []uint8{0x7C, 0x04, 0x18, 0x04, 0x78}
	case 'n':
		pattern = []uint8{0x7C, 0x08, 0x04, 0x04, 0x78}
	case 'o':
		pattern = []uint8{0x38, 0x44, 0x44, 0x44, 0x38}
	case 'p':
		pattern = []uint8{0x7C, 0x14, 0x14, 0x14, 0x08}
	case 'q':
		pattern = []uint8{0x08, 0x14, 0x14, 0x18, 0x7C}
	case 'r':
		pattern = []uint8{0x7C, 0x08, 0x04, 0x04, 0x08}
	case 's':
		pattern = []uint8{0x48, 0x54, 0x54, 0x54, 0x20}
	case 't':
		pattern = []uint8{0x04, 0x3F, 0x44, 0x40, 0x20}
	case 'u':
		pattern = []uint8{0x3C, 0x40, 0x40, 0x20, 0x7C}
	case 'v':
		pattern = []uint8{0x1C, 0x20, 0x40, 0x20, 0x1C}
	case 'w':
		pattern = []uint8{0x3C, 0x40, 0x30, 0x40, 0x3C}
	case 'x':
		pattern = []uint8{0x44, 0x28, 0x10, 0x28, 0x44}
	case 'y':
		pattern = []uint8{0x0C, 0x50, 0x50, 0x50, 0x3C}
	case 'z':
		pattern = []uint8{0x44, 0x64, 0x54, 0x4C, 0x44}

	// Numbers
	case '0':
		pattern = []uint8{0x3E, 0x51, 0x49, 0x45, 0x3E}
	case '1':
		pattern = []uint8{0x00, 0x42, 0x7F, 0x40, 0x00}
	case '2':
		pattern = []uint8{0x62, 0x51, 0x49, 0x45, 0x42}
	case '3':
		pattern = []uint8{0x42, 0x41, 0x49, 0x49, 0x36}
	case '4':
		pattern = []uint8{0x1C, 0x12, 0x11, 0x7F, 0x10}
	case '5':
		pattern = []uint8{0x47, 0x45, 0x45, 0x45, 0x39}
	case '6':
		pattern = []uint8{0x3C, 0x4A, 0x49, 0x49, 0x30}
	case '7':
		pattern = []uint8{0x01, 0x71, 0x09, 0x05, 0x03}
	case '8':
		pattern = []uint8{0x36, 0x49, 0x49, 0x49, 0x36}
	case '9':
		pattern = []uint8{0x06, 0x49, 0x49, 0x29, 0x1E}

	// Special characters
	case ' ':
		pattern = []uint8{0x00, 0x00, 0x00, 0x00, 0x00}
	case '.':
		pattern = []uint8{0x00, 0x60, 0x60, 0x00, 0x00}
	case ',':
		pattern = []uint8{0x00, 0x80, 0x60, 0x00, 0x00}
	case ':':
		pattern = []uint8{0x00, 0x36, 0x36, 0x00, 0x00}
	case ';':
		pattern = []uint8{0x00, 0x80, 0x36, 0x00, 0x00}
	case '!':
		pattern = []uint8{0x00, 0x00, 0x5F, 0x00, 0x00}
	case '?':
		pattern = []uint8{0x02, 0x01, 0x51, 0x09, 0x06}
	case '-':
		pattern = []uint8{0x08, 0x08, 0x08, 0x08, 0x08}
	case '_':
		pattern = []uint8{0x80, 0x80, 0x80, 0x80, 0x80}
	case '+':
		pattern = []uint8{0x08, 0x08, 0x3E, 0x08, 0x08}
	case '=':
		pattern = []uint8{0x14, 0x14, 0x14, 0x14, 0x14}
	case '/':
		pattern = []uint8{0x20, 0x10, 0x08, 0x04, 0x02}
	case '\\':
		pattern = []uint8{0x02, 0x04, 0x08, 0x10, 0x20}
	case '(':
		pattern = []uint8{0x00, 0x1C, 0x22, 0x41, 0x00}
	case ')':
		pattern = []uint8{0x00, 0x41, 0x22, 0x1C, 0x00}
	case '[':
		pattern = []uint8{0x00, 0x7F, 0x41, 0x41, 0x00}
	case ']':
		pattern = []uint8{0x00, 0x41, 0x41, 0x7F, 0x00}
	case '{':
		pattern = []uint8{0x00, 0x08, 0x36, 0x41, 0x00}
	case '}':
		pattern = []uint8{0x00, 0x41, 0x36, 0x08, 0x00}
	case '>':
		pattern = []uint8{0x08, 0x14, 0x22, 0x41, 0x00}

	default:
		// Unknown character displays as block
		pattern = []uint8{0x7F, 0x41, 0x41, 0x41, 0x7F}
	}

	// Draw character pixels
	for col := 0; col < 5; col++ {
		colData := pattern[col]
		for row := 0; row < 7; row++ {
			if (colData & (1 << row)) != 0 {
				system.Display.SetPixel(x+int16(col), y+int16(row), color.RGBA{255, 255, 255, 255})
			}
		}
	}
}
